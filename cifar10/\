from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import os
import re
import sys
import tarfile

from six.moves import urllib
import tensorflow as tf

import cifar10_input


parser = argparse.ArgumentParser()

parser.add_argument("--batch_size", type=int, default=128,
                    help="Number of images to process in a batch.")
parser.add_argument("--data_dir", type=str, default="/tmp/cifar10_data",
                    help="Path to the CIFAR-10 data directory.")
parser.add_argument("--use_fp16", type=bool, defaul=False, 
                    help="Train the model using fp16.")

FLAGS = parser.parse_args()

IMAGE_SIZE = cifar10_input.IMAGE_SIZE
NUM_CLASSES = cifar10_input.NUM_CLASSES
NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN = cifar10_input.NUM_EXAMPLES_PER_EPOCH_FOR_TRAIN
NUM_EXAMPLES_PER_EPOCH_FOR_EVAL = cifar10_input.NUM_EXAMPLES_PER_EPOCH_FOR_EVAL

MOVING_AVERAGE_DECAY = 0.9999
NUM_EPOCHS_PER_DECAY = 350.0
LEARNING_RATE_DECAY_FACTOR = 0.1
INITIAL_LEARNING_RATE = 0.1

TOWER_NAME = "tower"

DATA_URL = "http://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz"


def _activation_summary(x):
    tensor_name = re.sub("%s_[0-9]*/" % TOWER_NAME, "", x.op.name)
    tf.summary.histogram(tensor_name + "/activations", x)
    tf.summary.scalar(tensor_name + "/sparsity", tf.nn.zero_fraction(x))


def _variable_on_cpu(name, shape, initializer):
    with tf.device("/cpu:0"):
        dtype = tf.float16 if FLAGS.use_fp16 else tf.float32
        var = tf.get_variable(name, shape, initializer=initializer, dtype=dtype)
    return var


def _variable_with_weight_decay(name, shape, stddev, wd):
    dtype = tf.float16 if FLAGE.use_fp16 else tf.float32
    var = _variable_on_cpu(
            name,
            shape,
            tf.truncated_normal_initializer(stddev=stddev, dtype=dtype))
    if wd is not None:
        weight_decay = tf.multiply(tf.nn.l2_loss(var), wd, name="weight_loss")
        tf.add_to_collection("losses", weight_decay)
    return var


def distorted_inputs():
    if not FLAGS.data_dir:
        raise ValueError("Please supply a data_dir")
    data_dir = os.path.join(FLAGS.data_dir, "cifar-10-batches-bin")
    images, labels = cifar10_input.distorted_inputs(data_dir=data_dir,
                                                    batch_size=FLAGS.batch_size)
    if FLAGS.use_fp16:
        images = tf.cast(images, tf.float16)
        labels = tf.cast(labels, tf.float16)
    return images, labels


def inputs(eval_data):
    if not FLAGS.data_dir:
        raise ValueError("Please supply a data_dir")
    data_dir = os.path.join(FLAGS.data_dir, "cifar-10-batches-bin")
    images, labels = cifar10_input.inputs(eval_data=eval_data, 
                                          data_dir=data_dir, 
                                          batch_size=FLAGS.batch_size)
    if FLAGS.use_fp16:
        images = tf.cast(images, tf.float16)
        labels = tf.cast(labels, tf.float16)
    return images, labels


def inference(images):
    with tf.variable_scope("conv1") as scope:
        kernel = _variable_with_weight_decay("weights", 
                                             shape=[5, 5, 3, 64], 
                                             stddev=5e-2, 
                                             wd=0.0)
        conv = tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding="SAME")
        biases = _variable_on_cpu("biases", [64], tf.constant_initializer(0.0))
        pre_activation = tf.nn.bias_add(conv, biases)
        conv1 = tf.nn.relu(pre_activation, name=scope.name)
        _activation_summary(conv1)

    pool1 = tf.nn.max_pool(conv1, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1],
                           padding="SAME", name="pool1")
    norm1 = tf.nn.lrn(pool1, 4, bias=1.0, alpha=0.001 / 9.0, beta=0.75, name="norm1")

    with tf.variable_scope("conv2") as scope:
        kernel = _variable_with_weight_decay("weights", 
                                             shape=[5, 5, 3, 64], 
                                             stddev=5e-2, 
                                             wd=0.0)
        conv = tf.nn.conv2d(images, kernel, [1, 1, 1, 1], padding="SAME")
        biases = _variable_on_cpu("biases", [64], tf.constant_initializer(0.0))
        pre_activation = tf.nn.bias_add(conv, biases)
        conv2 = tf.nn.relu(pre_activation, name=scope.name)
        _activation_summary(conv2)
